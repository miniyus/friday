app:
  secret: ${APP_SECRET:}
info:
  app:
    name: ${APP_NAME:Friday API}
    version: ${version:0.0.1-SNAPSHOT}
  tags:
    environment: ${APP_ENV:local}
server:
  servlet:
    encoding:
      force-response: true
  forward-headers-strategy: framework
spring:
  application:
    name: ${APP_NAME:Friday API}
  boot:
    admin:
      client:
        url: ${ADMIN_SERVER_URL:http://localhost:4444}
        username: ${ADMIN_SERVER_USERNAME:admin}
        password: ${ADMIN_SERVER_PASSWORD:admin}
        instance:
          metadata:
            user.name: ${ADMIN_SERVER_USERNAME:admin}
            user.password: ${ADMIN_SERVER_PASSWORD:admin}
  servlet:
    multipart:
      max-file-size: 100MB
      max-request-size: 100MB
  profiles:
    active: ${APP_ENV:local}
    default: local
  h2:
    console:
      enabled: true
  datasource:
    url: jdbc:h2:mem:testdb
    username: sa
    password: pass
    driverClassName: org.h2.Driver
  jpa:
    show-sql: true
    hibernate:
      ddl-auto: create
    open-in-view: false
  flyway:
    locations: classpath:db/migration,classpath:db/callback
  data:
    web:
      pageable:
        one-indexed-parameters: true
    redis:
      pool:
        min-idle: 0
        max-idle: 8
        max-active: 8
      host: ${REDIS_HOST:127.0.0.1}
      port: ${REDIS_PORT:6379}
    rest:
      base-path: /api
      detection-strategy: annotated
  messages:
    basename: i18n/messages
    encoding: UTF-8
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID:google-client-id}
            client-secret: ${GOOGLE_CLIENT_SECRET:google-client-secret}
            scope:
              - email
              - profile
            redirect-uri: "{baseUrl}/oauth2/callback/{registrationId}"
            provider: google
          naver:
            client-id: ${NAVER_CLIENT_ID:naver-client-id}
            client-secret: ${NAVER_CLIENT_SECRET:naver-client-secret}
            scope:
              - name
              - email
            #- profile_image
            client-name: Naver
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/oauth2/callback/{registrationId}" #코드를 받는 uri(naver 의 콜백 uri)
            provider: naver
          kakao:
            client-id: ${KAKAO_CLIENT_ID:kakao-client-id}
            client-secret: ${KAKAO_CLIENT_SECRET:kakao-client-secret}
            scope:
              - profile_nickname
              - account_email
            client-name: Kakao
            authorization-grant-type: authorization_code
            client-authentication-method: POST #카카오는 필수 파라미터를 POST로 요청해야됌!
            redirect-uri: "{baseUrl}/oauth2/callback/{registrationId}" #코드를 받는 uri(naver 의 콜백 uri)
            provider: kakao
        provider: #네이버의 provider는 등록되어 있지 않아 사용자가 등록해야된다.
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize #네이버 로그인 창을 받을수 있다
            token-uri: https://nid.naver.com/oauth2.0/token #토큰을 받는 uri
            user-info-uri: https://openapi.naver.com/v1/nid/me #프로필 주소를 받는 uri
            user-name-attribute: response #회원 벙보를 json 형태로 받는데 response 라는 키값으로 네이버가 리턴해줌

          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: kakao_account
  devtools:
    add-properties: true
    restart:
      enabled: true
logging:
  slack:
    webhook-uri: ${SLACK_WEBHOOK_URI:slack-webhook-uri}
  level:
    root: warn
    undertow: warn
    org.springframework.web: debug
    org.springframework.core.LocalVariableTableParameterNameDiscoverer: error
    org.springframework.security: debug
    org.springframework.data: debug
    org.hibernate: error
    org.hibernate.SQL: debug
    org.hibernate.type: trace
    org.hibernate.orm.jdbc.bind: trace
    org.hibernate.orm.jdbc.extract: trace
    com.meteormin.friday: debug
    com.meteormin.friday.infrastructure.aspect: debug
    com.meteormin.friday.infrastructure.advice: debug
    com.meteormin.friday.infrastructure.task: debug
  file:
    name: friday.log
    path: logs
  pattern:
    file: ${CONSOLE_LOG_PATTERN:%clr(%d{${LOG_DATEFORMAT_PATTERN:yyyy-MM-dd'T'HH:mm:ss.SSSXXX}}){faint} %clr(${LOG_LEVEL_PATTERN:%5p}) %clr(${PID:}){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:%wEx}}
management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    env:
      show-values: ALWAYS
    configprops:
      show-values: ALWAYS
    health:
      show-details: ALWAYS
    logfile:
      enabled: true
  info:
    env:
      enabled: true
jwt:
  secret: ${JWT_SECRET:jwt-secret}
  accessToken:
    expiration: 3600
    header: Authorization
  refreshToken:
    expiration: 86400
    header: RefreshToken
springdoc:
  swagger-ui:
    path: /api-docs/swagger-ui
    url: /docs/friday-api.yaml
    groups-order: ASC
    operationsSorter: method
    disable-swagger-default-url: true
    display-request-duration: true
    urls:
      - url: /openapi/friday-api.json
        name: api
  show-actuator: true
  default-consumes-media-type: application/json
  default-produces-media-type: application/json
  paths-to-match:
    - /v1/**
  cache:
    disabled: true
