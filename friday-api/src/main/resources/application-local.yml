spring:
    h2:
        console:
            enabled: true
    datasource:
        url: jdbc:h2:mem:testdb
        username: testUser
        password: pass
        driverClassName: org.h2.Driver
    jpa:
        show-sql: true
        hibernate:
            ddl-auto: create
    redis:
        host: ${REDIS_HOST:localhost}
        port: ${REDIS_PORT:6379}
    messages:
        basename: i18n/messages
        encoding: UTF-8
    security:
        oauth2:
            client:
                registration:
                    google:
                        client-id: ${GOOGLE_CLIENT_ID}
                        client-secret: ${GOOGLE_CLIENT_SECRET}
                        scope:
                            - email
                            - profile
                        redirect-uri: "{baseUrl}/oauth2/callback/{registrationId}"
                        provider: google
                    naver:
                        client-id: ${NAVER_CLIENT_ID}
                        client-secret: ${NAVER_CLIENT_SECRET}
                        scope:
                            - name
                            - email
                        #- profile_image
                        client-name: Naver
                        authorization-grant-type: authorization_code
                        redirect-uri: "{baseUrl}/oauth2/callback/{registrationId}" #코드를 받는 uri(naver 의 콜백 uri)
                        provider: naver
                    kakao:
                        client-id: ${KAKAO_CLIENT_ID}
                        client-secret: ${KAKAO_CLIENT_SECRET}
                        scope:
                            - profile_nickname
                            - account_email
                        client-name: Kakao
                        authorization-grant-type: authorization_code
                        client-authentication-method: POST #카카오는 필수 파라미터를 POST로 요청해야됌!
                        redirect-uri: "{baseUrl}/oauth2/callback/{registrationId}" #코드를 받는 uri(naver 의 콜백 uri)
                        provider: kakao
                provider: #네이버의 provider는 등록되어 있지 않아 사용자가 등록해야된다.
                    naver:
                        authorization-uri: https://nid.naver.com/oauth2.0/authorize #네이버 로그인 창을 받을수 있다
                        token-uri: https://nid.naver.com/oauth2.0/token #토큰을 받는 uri
                        user-info-uri: https://openapi.naver.com/v1/nid/me #프로필 주소를 받는 uri
                        user-name-attribute: response #회원 벙보를 json 형태로 받는데 response 라는 키값으로 네이버가 리턴해줌

                    kakao:
                        authorization-uri: https://kauth.kakao.com/oauth/authorize
                        token-uri: https://kauth.kakao.com/oauth/token
                        user-info-uri: https://kapi.kakao.com/v2/user/me
                        user-name-attribute: kakao_account
    devtools:
        add-properties: true
        restart:
            enabled: true
logging:
    file:
        path: ${LOG_PATH:log}
        name: ${LOG_PATH:log}/friday-api.log
    logback:
        rollingpolicy:
            file-name-pattern: ${LOG_PATH:./log}/friday-api-%d{yyyy-MM-dd}.%i
    level:
        root: warn
        tomcat: warn
        org.springframework.web: ${LOG_LEVEL:debug}
        com.miniyus.friday: ${LOG_LEVEL:debug}
        org.hibernate: error

management:
    endpoints:
        web:
            exposure:
                include: "*"
jwt:
    secret: ${JWT_SECRET}
    access:
        expiration: 3600
        header: Authorization
    refresh:
        expiration: 36000
        header: RefreshToken
